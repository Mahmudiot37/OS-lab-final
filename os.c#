using System;
using System.Collections.Generic;
using System.IO;
using Sys = Cosmos.System;

namespace CosmosKernel1
{
    public class Kernel : Sys.Kernel
    {
        Sys.FileSystem.CosmosVFS fs;
        string current_directory = "0:\\";

        protected override void BeforeRun()
        {
            Console.Clear();
            Console.WriteLine("Welcome to our Operating System\n\n");
            fs = new Sys.FileSystem.CosmosVFS();
            Sys.FileSystem.VFS.VFSManager.RegisterVFS(fs);
        }

        protected override void Run()
        {
            string input;
            input = Console.ReadLine();
            if (input == "commandList")
            {
                Console.WriteLine("\nabout\ncalculator\nclear\ncommandList\ndate\nday\nhello\nshutdown\ntime\nls\ntouch\nwrite\nappend\nshow\ndls\nfcfsScheduler\nrrScheduler\n");
            }
            if (input == "hello")
            {
                Console.WriteLine("Hello User! Thanks for using this Operating System!\n");
            }
            if (input == "about")
            {
                Console.WriteLine("Final Project Operating System Version 0.0\n");
            }
            if (input == "date")
            {
                string date = DateTime.Now.ToString("dd/MM/yyyy\n");
                Console.WriteLine(date);
            }
            if (input == "time")
            {
                string time = DateTime.Now.ToString("HH:mm:ss\n");
                Console.WriteLine(time);
            }
            if (input == "day")
            {
                string day = DateTime.Now.ToString("dddd\n");
                Console.WriteLine(day);
            }
            if (input == "shutdown")
            {
                Sys.Power.Shutdown();
            }
            if (input == "touch")
            {
                Console.WriteLine("Enter the file name :");
                string fileName = Console.ReadLine();
                try
                {
                    if (string.IsNullOrEmpty(fileName))
                    {
                        throw new ArgumentException("Please provide a valid filename.\n");
                    }
                    if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        fileName += ".txt";
                    }
                    string filePath = Path.Combine(current_directory, fileName);
                    if (File.Exists(filePath))
                    {
                        Console.WriteLine($"'{fileName}' already exists.\n");
                        return;
                    }
                    using (FileStream fileStream = File.Create(filePath))
                    {
                        Console.WriteLine($"{fileName} created successfully!\n");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error creating file: {ex.Message}");
                }
            }
            if (input == "ls")
            {
                try
                {
                    string[] files = Directory.GetFiles(current_directory);
                    Console.WriteLine("Files in the current directory:");
                    foreach (string file in files)
                    {
                        Console.WriteLine(Path.GetFileName(file));
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error listing files: {ex.Message}\n");
                }
                Console.WriteLine("\n");
            }
            if (input == "dls")
            {
                Console.WriteLine("Enter the file name :");
                string fileName = Console.ReadLine();
                try
                {
                    if (string.IsNullOrEmpty(fileName))
                    {
                        throw new ArgumentException("Please provide a valid filename.");
                    }
                    if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        fileName += ".txt";
                    }
                    string filePath = Path.Combine(current_directory, fileName);
                    if (!File.Exists(filePath))
                    {
                        Console.WriteLine($"{fileName} does not exist.\n");
                        return;
                    }
                    File.Delete(filePath);
                    Console.WriteLine($"{fileName} deleted successfully!\n");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting file: {ex.Message}");
                }
            }
            if (input == "write")
            {
                Console.WriteLine("Enter the file name :");
                string fileName = Console.ReadLine();
                try
                {
                    if (string.IsNullOrEmpty(fileName))
                    {
                        throw new ArgumentException("Please provide a valid filename.\n");
                    }
                    if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        fileName += ".txt";
                    }
                    string filePath = Path.Combine(current_directory, fileName);
                    if (!File.Exists(filePath))
                    {
                        Console.WriteLine($"{fileName} does not exist. Please create the file first.\n");
                        return;
                    }
                    Console.WriteLine("Enter the text to write to the file:");
                    string fileContent = Console.ReadLine();
                    File.WriteAllText(filePath, fileContent);
                    Console.WriteLine($"Content written to '{fileName}' successfully!\n");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error writing to file: {ex.Message}\n");
                }
            }
            if (input == "show")
            {
                Console.WriteLine("Enter the file name :");
                string fileName = Console.ReadLine();
                try
                {
                    if (string.IsNullOrEmpty(fileName))
                    {
                        throw new ArgumentException("Please provide a valid filename.\n");
                    }
                    if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        fileName += ".txt";
                    }
                    string filePath = Path.Combine(current_directory, fileName);
                    if (!File.Exists(filePath))
                    {
                        Console.WriteLine($"{fileName} does not exist.\n");
                        return;
                    }
                    string fileContent = File.ReadAllText(filePath);
                    Console.WriteLine($"Content of '{fileName}':");
                    Console.WriteLine(fileContent);
                    Console.WriteLine();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error displaying file content: {ex.Message}\n");
                }
            }
            if (input == "append")
            {
                Console.WriteLine("Enter the file name :");
                string fileName = Console.ReadLine();
                try
                {
                    if (string.IsNullOrEmpty(fileName))
                    {
                        throw new ArgumentException("Please provide a valid filename.\n");
                    }
                    if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        fileName += ".txt";
                    }
                    string filePath = Path.Combine(current_directory, fileName);
                    if (!File.Exists(filePath))
                    {
                        Console.WriteLine($"{fileName} does not exist. Please create the file first.\n");
                        return;
                    }
                    Console.WriteLine("Enter the text to append:");
                    string appendedText = Console.ReadLine();
                    File.AppendAllText(filePath, appendedText);
                    Console.WriteLine($"Text appended to '{fileName}' successfully!\n");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error appending text to file: {ex.Message}\n");
                }
            }
            if (input == "clear")
            {
                Console.Clear();
            }

            if (input == "calculator")
            {
                Console.WriteLine("Enter 'add' for addition\nEnter 'sub' for subtraction\nEnter 'mul' for multiplication\nEnter 'div' for division\n");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "add":
                        Addition();
                        break;
                    case "sub":
                        Subtraction();
                        break;
                    case "mul":
                        Multiplication();
                        break;
                    case "div":
                        Division();
                        break;
                    default:
                        Console.WriteLine("Invalid choice!\n");
                        break;
                }

                static void Addition()
                {
                    Console.Write("Enter the first number: ");
                    double num1 = Convert.ToDouble(Console.ReadLine());

                    Console.Write("Enter the second number: ");
                    double num2 = Convert.ToDouble(Console.ReadLine());

                    double result = num1 + num2;
                    Console.WriteLine($"Result: {result}\n");
                }

                static void Subtraction()
                {
                    Console.Write("Enter the first number: ");
                    double num1 = Convert.ToDouble(Console.ReadLine());

                    Console.Write("Enter the second number: ");
                    double num2 = Convert.ToDouble(Console.ReadLine());

                    double result = num1 - num2;
                    Console.WriteLine($"Result: {result}\n");
                }

                static void Multiplication()
                {
                    Console.Write("Enter the first number: ");
                    double num1 = Convert.ToDouble(Console.ReadLine());

                    Console.Write("Enter the second number: ");
                    double num2 = Convert.ToDouble(Console.ReadLine());

                    double result = num1 * num2;
                    Console.WriteLine($"Result: {result}\n");
                }

                static void Division()
                {
                    Console.Write("Enter the dividend: ");
                    double dividend = Convert.ToDouble(Console.ReadLine());

                    Console.Write("Enter the divisor (non-zero): ");
                    double divisor = Convert.ToDouble(Console.ReadLine());

                    if (divisor == 0)
                    {
                        Console.WriteLine("Error: Division by zero!\n");
                        return;
                    }

                    double result = dividend / divisor;
                    Console.WriteLine($"Result: {result} \n");
                }
            }

            if (input == "fcfsScheduler")
            {
                RunFCFSScheduler();
            }

            if (input == "rrScheduler")
            {
                Console.WriteLine("Enter the time quantum: ");
                int timeQuantum;
                if (int.TryParse(Console.ReadLine(), out timeQuantum))
                {
                    RunRRScheduler(timeQuantum);
                }
                else
                {
                    Console.WriteLine("Invalid time quantum value.\n");
                }
            }
        }

        static void RunFCFSScheduler()
        {
            List<Process> processes = new List<Process>();
            Console.WriteLine("Enter the number of processes: ");
            int numProcesses = int.Parse(Console.ReadLine());

            for (int i = 0; i < numProcesses; i++)
            {
                Console.WriteLine($"Enter burst time for process {i + 1}: ");
                int burstTime = int.Parse(Console.ReadLine());
                processes.Add(new Process { Id = i + 1, BurstTime = burstTime });
            }

            Console.WriteLine("Process\tBurst Time\tWaiting Time\tTurnaround Time");

            int totalWaitingTime = 0;
            int totalTurnaroundTime = 0;
            int waitingTime = 0;

            foreach (var process in processes)
            {
                int turnaroundTime = waitingTime + process.BurstTime;
                Console.WriteLine($"{process.Id}\t{process.BurstTime}\t\t{waitingTime}\t\t{turnaroundTime}");

                totalWaitingTime += waitingTime;
                totalTurnaroundTime += turnaroundTime;
                waitingTime += process.BurstTime;
            }

            Console.WriteLine($"Average Waiting Time: {(float)totalWaitingTime / numProcesses}");
            Console.WriteLine($"Average Turnaround Time: {(float)totalTurnaroundTime / numProcesses}\n");
        }

        static void RunRRScheduler(int timeQuantum)
        {
            List<Process> processes = new List<Process>();
            Console.WriteLine("Enter the number of processes: ");
            int numProcesses = int.Parse(Console.ReadLine());

            for (int i = 0; i < numProcesses; i++)
            {
                Console.WriteLine($"Enter burst time for process {i + 1}: ");
                int burstTime = int.Parse(Console.ReadLine());
                processes.Add(new Process { Id = i + 1, BurstTime = burstTime });
            }

            Queue<Process> processQueue = new Queue<Process>(processes);
            int currentTime = 0;
            int totalWaitingTime = 0;
            int totalTurnaroundTime = 0;

            while (processQueue.Count > 0)
            {
                var process = processQueue.Dequeue();

                if (process.BurstTime > timeQuantum)
                {
                    currentTime += timeQuantum;
                    process.BurstTime -= timeQuantum;
                    processQueue.Enqueue(process);
                }
                else
                {
                    currentTime += process.BurstTime;
                    int turnaroundTime = currentTime;
                    int waitingTime = turnaroundTime - process.OriginalBurstTime;
                    totalWaitingTime += waitingTime;
                    totalTurnaroundTime += turnaroundTime;

                    Console.WriteLine($"Process {process.Id}: Waiting Time = {waitingTime}, Turnaround Time = {turnaroundTime}");
                }
            }

            Console.WriteLine($"Average Waiting Time: {(float)totalWaitingTime / numProcesses}");
            Console.WriteLine($"Average Turnaround Time: {(float)totalTurnaroundTime / numProcesses}\n");
        }
    }

    class Process
    {
        public int Id { get; set; }
        public int BurstTime { get; set; }
        public int OriginalBurstTime { get; set; }

        public Process()
        {
            OriginalBurstTime = BurstTime;
        }
    }
}
